1.	Что такое ООП. Какие парадигмы знаете еще, чем ООП отличается от других, которые уже знаете и/или используете?
2.	Что такое класс, что такое объект, в чем разница?
3.	Что такое свойства класса?
4.	Какие основные принципы / концепции ООП вы знаете?
5.	Абстракция. Что это. Зачем?
6.	Инкапсуляция. Когда используем?
7.	Что такое наследование, для чего мы его используем?
8.	Что такое полиморфизм, как он нам помогает?
9.	Что такое декомпозиция, зачем мы ее делаем?
10.	Область видимости поля / метода класса.
11.	Что такое SOLID?
12.	Cohesion vs coupling. Чем отличается, что лучше?
13.	Абстрактный класс, абстрактный метод, разница?
14.	Интерфейс. Что это такое, для чего используется?
15.	Разница межу наследованием абстрактного класса и реализацией интерфейса.
16.	Mutable / Immutable объекты. Для чего используются?
17.	Модификаторы доступа: default  / private / public / protected.
18.	Модификатор final. Для чего используется?
19.	Модификатор static. Статическое поле. Статический метод. Нюансы доступа.
20.	Расширение / сужение области видимости.
21.	Что такое конструктор класса. Конструктор по умолчанию. Класс без конструктора.
22.	Инстанциирование. Жизненный цикл объекта.
23.	Primary / secondary конструктор. Для чего используются. Преимущества?
24.	Преобразование типов. Как перед приведением проверить реальный тип объекта?
25.	Что такое множественное наследование. Как его реализовать если язык его не поддерживает?
26.	Что такое паттерн проектирования. Структура паттернов. Сколько всего паттернов?
27.	Builder-паттерны. Разница между Builder и Factory?
28.	Composition-паттерны. Proxy, Facade, Decorator.
29.	Behavior-паттерны. Command, Observer, Iterator, Strategy.
30.	Override vs overload.
31.	Как «передать» поведение в виде параметра в метод/конструктор класса.
32.	Что такое лямбда-выражение в Java.
